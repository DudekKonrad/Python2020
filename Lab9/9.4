class Node:

	def __init__(self):
		self.data = None
		self.next = None

	def __str__(self):
		return str(self.data)


class SortedList:

	def __init__(self):
		self.head = None
		self.lenght = 0

	def __str__(self):
		data = []
		curr = self.head
		while curr is not None:
			data.append(curr.data)
			curr = curr.next
		return "[%s]" % (', '.join(str(i) for i in data))

	def __repr__(self):
		return self.__str__()

	def is_empty(self):
		return self.head is None

	def insert(self, data):
		curr = self.head
		if curr is None:
			n = Node()
			n.data = data
			self.head = n
			self.lenght += 1
			return
		if curr.data < data:
			n = Node()
			n.data = data
			n.next = curr
			self.head = n
			self.lenght += 1
			return
		while curr.next is not None:
			if curr.next.data < data:
				break
			curr = curr.next
		n = Node()
		n.data = data
		n.next = curr.next
		curr.next = n
		self.lenght += 1
		return

	def remove(self):
		result = self.head
		self.head = self.head.next
		self.lenght -= 1
		return result

	def merge(self, l2):
		if self.head:
			if l2.head:
				if self.head.data > l2.head.data:
					head = self.head
					self.head = self.head.next
				else:
					head = l2.head
					l2.head = l2.head.next
			else:
				return self.head
		else:
			return l2.head
		last = head
		while self.head is not None and l2.head is not None:
			if self.head.data > l2.head.data:
				last.next = self.head
				self.head = self.head.next
			else:
				last.next = l2.head
				l2.head = l2.head.next
			last = last.next
		if self.head:
			last.next = self.head
		if l2.head:
			last.next = l2.head
		self.head = head

	def clear(self):
		self.head = None
